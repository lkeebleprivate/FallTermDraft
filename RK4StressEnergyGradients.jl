#=

    In this file we write functions for the independent components of the fluid equations of motion: ∇_{a} T^{ab}=0. For the conformal Euler and BDNK systems in (1+1)D,
    there are two nontrivial components: the t and x components. We write functions for each of these for the Euler and BDNK systems discretized using the leapfrog scheme.
    These functions are to be used to evaluate the independent residual of the numerical solutions to chec2.0*k for the correctness of our solutions.

=#

module RK4StressEnergyGradients

#=
    Notation: time level specified by 0, 1, 2. Space level specified by m, "", p. That is, v0m denotes v^{n-1}_{j-1}, v0 denotes v^{n-1}_{j},
    v0p denotes v^{n-1}_{j+1}, v1m denotes v^{n}_{j-1}, v1 denotes v^{n}_{j}, v1p denotes v^{n}_{j+1} etc.
=#

module Euler

stress_energy_gradient_t(v0m2::Float64, v0m1::Float64, v0j::Float64, v0p1::Float64, v0p2::Float64, ε0m2::Float64, ε0m1::Float64, ε0j::Float64, ε0p1::Float64, ε0p2::Float64, vm2j::Float64, vm1j::Float64, vp1j::Float64, vp2j::Float64, εm2j::Float64, εm1j::Float64, εp1j::Float64, εp2j::Float64, k::Float64, h::Float64) = (-((-1 + v0j^2)*(4*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)/(12.0*h)*v0j + (εm2j - 8*εm1j + 8*εp1j - εp2j)/(12.0*k)*(3 + v0j^2))) + 4*(2*(vm2j - 8*vm1j + 8*vp1j - vp2j)/(12.0*k)*v0j + (v0m2 - 8*v0m1 + 8*v0p1 - v0p2)/(12.0*h)*(1 + v0j^2))*ε0j)/(3.0*(-1 + v0j^2)^2)

stress_energy_gradient_x(v0m2::Float64, v0m1::Float64, v0j::Float64, v0p1::Float64, v0p2::Float64, ε0m2::Float64, ε0m1::Float64, ε0j::Float64, ε0p1::Float64, ε0p2::Float64, vm2j::Float64, vm1j::Float64, vp1j::Float64, vp2j::Float64, εm2j::Float64, εm1j::Float64, εp1j::Float64, εp2j::Float64, k::Float64, h::Float64) = (-((-1 + v0j^2)*(4*(εm2j - 8*εm1j + 8*εp1j - εp2j)/(12.0*k)*v0j + (ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)/(12.0*h)*(1 + 3*v0j^2))) + 4*(2*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)/(12.0*h)*v0j + (vm2j - 8*vm1j + 8*vp1j - vp2j)/(12.0*k)*(1 + v0j^2))*ε0j)/(3.0*(-1 + v0j^2)^2)

end


module BDNK

stress_energy_gradient_t(v0m2::Float64, v0m1::Float64, v0j::Float64, v0p1::Float64, v0p2::Float64, ε0m2::Float64, ε0m1::Float64, ε0j::Float64, ε0p1::Float64, ε0p2::Float64, V0m2::Float64, V0m1::Float64, V0j::Float64, V0p1::Float64, V0p2::Float64, E0m2::Float64, E0m1::Float64, E0j::Float64, E0p1::Float64, E0p2::Float64, Vm2j::Float64, Vm1j::Float64, Vp1j::Float64, Vp2j::Float64, Em2j::Float64, Em1j::Float64, Ep1j::Float64, Ep2j::Float64, η0::Float64, λ0::Float64, χ0::Float64, k::Float64, h::Float64) = (-432*E0j^2*(1 - v0j^2)*(3*χ0 + (2*λ0 + χ0)*v0j^2) - (36*E0j*(4*v0j^2*(6*η0 - 11*λ0 - 15*χ0 - (2*η0 + λ0 + χ0)*v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j - 4*(1 - v0j^2)*(λ0 + 7*χ0 + (2*η0 + λ0 + χ0)*v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j - 64*h*(1 - v0j^2)^1.5*(3 + v0j^2)*ε0j^1.25 + v0j*(-96*h*(5*λ0 + 7*χ0 + (-2*η0 + λ0 + χ0)*v0j^2)*V0j*ε0j + (1 - v0j^2)*(3*λ0 + 7*χ0 + (λ0 + χ0)*v0j^2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2))))/h + (-1 + v0j^2)^2*((-144*(Em2j - 8*Em1j + 8*Ep1j - Ep2j)*(3*χ0 + (2*λ0 + χ0)*v0j^2)*ε0j)/(k*(-1 + v0j^2)) + (160*(2*η0 - 3*λ0 - 2*χ0)*v0j^4*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2*ε0j^2)/(h^2*(-1 + v0j^2)^3) + (64*η0*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2*ε0j^2)/(h^2*(-1 + v0j^2)) - (48*λ0*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2*ε0j^2)/(h^2*(-1 + v0j^2)) - (64*χ0*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2*ε0j^2)/(h^2*(-1 + v0j^2)) - (2304*(3*(2*λ0 + χ0) - 3*(4*η0 - 8*λ0 - 5*χ0)*v0j^2 + (-8*η0 + 2*χ0)*v0j^4)*V0j^2*ε0j^2)/(-1 + v0j^2)^3 + (192*η0*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2)/h - (192*χ0*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2)/h + (192*η0*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2)/(h*(-1 + v0j^2)) - (576*λ0*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2)/(h*(-1 + v0j^2)) - (768*χ0*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2)/(h*(-1 + v0j^2)) + (768*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j^2.25)/(h*sqrt(1 - v0j^2)) + (48*V0j*ε0j*(-4*v0j*((16*η0 - 33*λ0 - 25*χ0 + 3*(8*η0 - 9*λ0 - 5*χ0)*v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2) - 96*h*(1 - v0j^2)^1.5*ε0j^0.25)*ε0j + 3*(1 - v0j^2)*(5*λ0 + 3*χ0 + (-4*η0 + 7*λ0 + 13*χ0)*v0j^2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)))/(h*(1 - v0j^2)^3) + (48*v0j^3*ε0j*(8*(2*η0 - 3*λ0 - 2*χ0)*(v0m2 - 16*v0m1 + 30*v0j - 16*v0p1 + v0p2)*ε0j - (η0 - 3*λ0 - 4*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)))/(h^2*(-1 + v0j^2)^2) + 48*v0j*ε0j*((-3*(E0m2 - 8*E0m1 + 8*E0p1 - E0p2)*(3*λ0 + 7*χ0 + (λ0 + χ0)*v0j^2))/(h*(-1 + v0j^2)) + (4*(((4*η0 - 3*λ0 - 4*χ0)*(v0m2 - 16*v0m1 + 30*v0j - 16*v0p1 + v0p2))/h^2 + ((4*η0 - χ0 + (4*η0 - 6*λ0 - 4*χ0)/(-1 + v0j^2))*(Vm2j - 8*Vm1j + 8*Vp1j - Vp2j))/k)*ε0j)/(1 - v0j^2) + ((η0 - 2*λ0 - 3*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2))/(h^2*(-1 + v0j^2)) + (16*ε0j^0.25*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2))/(h*sqrt(1 - v0j^2))) - (3*λ0*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)^2)/h^2 - (144*λ0*ε0j*(ε0m2 - 16*ε0m1 + 30*ε0j - 16*ε0p1 + ε0p2))/h^2 - (6*v0j^2*((8*((8*η0 - 9*λ0 - 8*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2 + 16*h*(2*η0 - 3*λ0 - 2*χ0)*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2))*ε0j^2)/(1 - v0j^2) + 32*h*(-η0 + χ0)*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2)*ε0j^2 - (256*h*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j^2.25)/sqrt(1 - v0j^2) + (λ0 + 2*χ0)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)^2 + 48*(λ0 + 2*χ0)*ε0j*(ε0m2 - 16*ε0m1 + 30*ε0j - 16*ε0p1 + ε0p2)))/(h^2*(1 - v0j^2))))/(6912.0*(1 - v0j^2)^2.5*ε0j^1.25)

stress_energy_gradient_x(v0m2::Float64, v0m1::Float64, v0j::Float64, v0p1::Float64, v0p2::Float64, ε0m2::Float64, ε0m1::Float64, ε0j::Float64, ε0p1::Float64, ε0p2::Float64, V0m2::Float64, V0m1::Float64, V0j::Float64, V0p1::Float64, V0p2::Float64, E0m2::Float64, E0m1::Float64, E0j::Float64, E0p1::Float64, E0p2::Float64, Vm2j::Float64, Vm1j::Float64, Vp1j::Float64, Vp2j::Float64, Em2j::Float64, Em1j::Float64, Ep1j::Float64, Ep2j::Float64, η0::Float64, λ0::Float64, χ0::Float64, k::Float64, h::Float64) = (-432*h^2*k*E0j^2*v0j*(-1 + v0j^2)^2*(λ0 + 4*χ0 + λ0*v0j^2) - 160*k*(2*η0 - 3*λ0 - 2*χ0)*v0j^5*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2*ε0j^2 - 36*h*k*E0j*(1 - v0j^2)*(-192*h*(λ0 + χ0 + (-η0 + 2*λ0 + 3*χ0)*v0j^2)*V0j*ε0j + 4*v0j*((4*η0 - 7*λ0 - 13*χ0 - (5*λ0 + 3*χ0)*v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2) - 64*h*(1 - v0j^2)^1.5*ε0j^0.25)*ε0j - (-1 + v0j^2)*(λ0 + χ0 + (3*λ0 + 7*χ0)*v0j^2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)) + 48*k*v0j^4*ε0j*(-8*(2*η0 - 3*λ0 - 2*χ0)*(-1 + v0j^2)*(v0m2 - 16*v0m1 + 30*v0j - 16*v0p1 + v0p2)*ε0j - 80*h*(2*η0 - 3*λ0 - 2*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*V0j*ε0j + (η0 - 3*λ0 - 4*χ0)*(-1 + v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)) - 24*v0j^2*(1 - v0j^2)*ε0j*(16*h^2*(2*η0 - 3*λ0 - 2*χ0)*(Vm2j - 8*Vm1j + 8*Vp1j - Vp2j)*ε0j + 24*h*k*V0j*((16*η0 - 21*λ0 - 13*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2) - 32*h*sqrt(1 - v0j^2)*ε0j^0.25)*ε0j - (1 - v0j^2)*(24*h*k*(λ0 + 2*χ0)*(E0m2 - 8*E0m1 + 8*E0p1 - E0p2) + 8*(k*(8*η0 - 6*λ0 - 5*χ0)*(v0m2 - 16*v0m1 + 30*v0j - 16*v0p1 + v0p2) + 3*h^2*η0*(Vm2j - 8*Vm1j + 8*Vp1j - Vp2j))*ε0j - k*(4*η0 - 7*λ0 - 9*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)) - 32*h*k*(1 - v0j^2)^1.5*ε0j^0.25*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)) + 24*(-1 + v0j^2)^2*ε0j*(-6*h*k*(λ0 + χ0)*(E0m2 - 8*E0m1 + 8*E0p1 - E0p2)*(-1 + v0j^2) + 8*(-(k*(4*η0 - χ0)*(-1 + v0j^2)*(v0m2 - 16*v0m1 + 30*v0j - 16*v0p1 + v0p2)) + 3*h^2*(λ0 - η0*v0j^2)*(Vm2j - 8*Vm1j + 8*Vp1j - Vp2j))*ε0j - 8*h*k*V0j*((8*η0 - 9*λ0 - 5*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2) - 48*h*sqrt(1 - v0j^2)*ε0j^0.25)*ε0j + k*(2*η0 - λ0 - χ0)*(-1 + v0j^2)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2) + 8*h*k*(1 - v0j^2)^1.5*ε0j^0.25*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)) - v0j*(1 - v0j^2)*(144*h^2*λ0*(Em2j - 8*Em1j + 8*Ep1j - Ep2j)*(-1 + v0j^2)^2*ε0j + 2304*h^2*k*(8*η0 - 21*λ0 - 8*χ0 + 9*η0*v0j^2)*V0j^2*ε0j^2 - 1536*h*k*(1 - v0j^2)^1.5*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j^2.25 - 16*(1 - v0j^2)*ε0j*(18*h^2*(λ0 + 2*χ0)*(Em2j - 8*Em1j + 8*Ep1j - Ep2j) - k*((20*η0 - 12*λ0 - 11*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2 + 12*h*(8*η0 - 9*λ0 - 5*χ0)*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2))*ε0j) - 144*h*k*(4*η0 - 11*λ0 - 9*χ0)*(-1 + v0j^2)*V0j*ε0j*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2) + 3*k*(2*λ0 + χ0)*(-1 + v0j^2)^2*((ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)^2 + 48*ε0j*(ε0m2 - 16*ε0m1 + 30*ε0j - 16*ε0p1 + ε0p2))) - 2*k*v0j^3*(1152*h^2*(11*η0 - 30*λ0 - 20*χ0 + 9*η0*v0j^2)*V0j^2*ε0j^2 + 8*(1 - v0j^2)*((40*η0 - 42*λ0 - 31*χ0)*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)^2 + 48*h*(2*η0 - 3*λ0 - 2*χ0)*(V0m2 - 8*V0m1 + 8*V0p1 - V0p2))*ε0j^2 - 768*h*(1 - v0j^2)^1.5*(v0m2 - 8*v0m1 + 8*v0p1 - v0p2)*ε0j^2.25 - 288*h*(η0 - 3*λ0 - 4*χ0)*(-1 + v0j^2)*V0j*ε0j*(ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2) + 3*(λ0 + 2*χ0)*(-1 + v0j^2)^2*((ε0m2 - 8*ε0m1 + 8*ε0p1 - ε0p2)^2 + 48*ε0j*(ε0m2 - 16*ε0m1 + 30*ε0j - 16*ε0p1 + ε0p2))))/(6912.0*h^2*k*(1 - v0j^2)^3.5*ε0j^1.25)
end

end